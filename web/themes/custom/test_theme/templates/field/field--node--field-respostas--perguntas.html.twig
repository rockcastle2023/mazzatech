{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 * @ingroup templates
 *
 * @see template_preprocess_field()
 */
#}
{%
  set classes = [
    'field',
    'field--name-' ~ field_name|clean_class,
    'field--type-' ~ field_type|clean_class,
    'field--label-' ~ label_display,
  ]
%}
{%
  set title_classes = [
    'field--label',
    label_display == 'visually_hidden' ? 'sr-only',
  ]
%}

{# Inicializa o contador #}
{% set counter = 0 %}

{# Função para converter números em letras #}
{% macro number_to_letter(number) %}
  {% set alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'] %}
  {% set index = (number - 1) % 26 %}
  {{ alphabet[index] }}
{% endmacro %}

{% import _self as helpers %}
<div class="respGeral">
{% if label_hidden %}
  {% if multiple %}
    <div{{ attributes.addClass(classes, 'field--items') }}>
      {% for item in items %}
        {# Incrementa o contador a cada iteração #}
        {% set counter = counter + 1 %}
        
        <div{{ item.attributes.addClass('field--item itemResp') }}>
            <div class="lettterResp"><h2>{{ helpers.number_to_letter(counter) }}</h2></div>
            {{ item.content }}
        </div>

      {% endfor %}
    </div>
  {% else %}
    {% for item in items %}
      {# Incrementa o contador a cada iteração #}
      {% set counter = counter + 1 %}
      
      <div{{ attributes.addClass(classes, 'field--item itemResp') }}>
        <div class="lettterResp"><h2>{{ helpers.number_to_letter(counter) }}</h2></div>
        {{ item.content }}
      </div>

    {% endfor %}
  {% endif %}
{% else %}
  <div{{ attributes.addClass(classes) }}>
    <div{{ title_attributes.addClass(title_classes) }}>{{ label }}</div>
    {% if multiple %}
      <div class="field--items">
    {% endif %}
    {% for item in items %}
      {# Incrementa o contador a cada iteração #}
      {% set counter = counter + 1 %}
      
      <div{{ item.attributes.addClass('field--item itemResp') }}>
        <div class="lettterResp"><h2>{{ helpers.number_to_letter(counter) }}</h2></div>
        {{ item.content }}
      </div>
    {% endfor %}
    {% if multiple %}
      </div>
    {% endif %}
  </div>
{% endif %}
</div>
